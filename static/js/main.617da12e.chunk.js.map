{"version":3,"sources":["fonts/TREBUCBD.ttf","services/displayUnicode.js","services/getDayName.js","components/DayBox/DayBox.js","services/dateService.js","services/holidays.js","services/shifts.js","services/monthNames.js","components/DateSelector/components/MonthSelector.js","components/DateSelector/components/ShiftSelector.js","components/DateSelector/components/YearSelector.js","components/DateSelector/DateSelector.js","components/Calendar/Calendar.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","displayUnicode","duty","pictogram","getDayName","dateArray","Date","getDay","DayBox","props","dayName","date","holidayCheck","holiday","digitNumberCheck","length","className","today","isMonthAndYearMatch","id","shift","role","aria-label","DateService","getFullYear","getMonth","getDate","firstDate","secondDate","startDate","endDate","startYear","endYear","years","push","days","valueOf","currentDate","this","isDatesMatch","makeDateArray","addDaysToDate","element","datesToCheck","fixed","isContains","forEach","e","day","BigHolidays","year","f","Math","floor","G","C","H","I","L","month","easter","getEaster","secondEaster","corpusChristi","constantDays","getSecondEaster","getCorpusChristi","Shifts","dayDifference","getRefDate","round","abs","positive","night","getDayDifference","counter","monthNumber","monthArray","i","shiftNumber","getShiftNumber","dateIndex","shiftMonth","holidays","Holidays","getBigHolidays","monthWithHolidays","containsDateCheck","createMonth","firstDay","getFirstShiftDay","firstDateShowed","dutySwitch","addHolidaysToShiftMonth","dualShiftNumber","firstShift","createShiftMonth","secondShift","dualShiftMonth","monthNames","MonthSelector","name","value","onChange","handler","target","map","key","ShiftSelector","YearSelector","onClick","DateSelector","yearSelector","state","monthSelector","shiftSelector","Calendar","now","handleMonthSelector","setState","parseInt","handleYearSelector","handleShiftSelector","dutyMonth","createBlankMonth","createDualShiftMonth","React","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.617da12e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TREBUCBD.e1eb63ed.ttf\";","const displayUnicode = (duty, pictogram) => {\r\n  switch (duty) {\r\n    case \"night\":\r\n      return pictogram ? \"🌙\" : \"noc\";\r\n    case \"day\":\r\n      return pictogram ? \"☀\" : 'dzień';\r\n    default:\r\n      return pictogram ? \"-\" : \"wolne\";\r\n  }\r\n};\r\n\r\nexport default displayUnicode;","const getDayName = (dateArray) => {\r\n  const date = new Date(...dateArray).getDay();\r\n  switch (date) {\r\n    case 0:\r\n      return \"ND\";\r\n    case 1:\r\n      return \"PN\";\r\n    case 2:\r\n      return \"WT\";\r\n    case 3:\r\n      return \"ŚR\";\r\n    case 4:\r\n      return \"CZW\";\r\n    case 5:\r\n      return \"PT\";\r\n    case 6:\r\n      return \"SO\";\r\n    default:\r\n      return \"error\";\r\n  }\r\n};\r\n\r\nexport default getDayName;","import React from \"react\";\r\nimport displayUnicode from \"../../services/displayUnicode\";\r\nimport getDayName from \"../../services/getDayName\";\r\nimport \"./DayBox.css\";\r\n\r\nconst DayBox = (props) => {\r\n  const dayName = getDayName(props.date);\r\n  const holidayCheck =\r\n    dayName === \"ND\" || props.holiday ? \"holiday-dayname\" : \"regular-dayname\";\r\n  const digitNumberCheck = (props.date[2] + \"\").length === 2 && true;\r\n  return (\r\n    <div\r\n      className={\r\n        props.date[2] === props.today && props.isMonthAndYearMatch\r\n          ? \"day-box-today\"\r\n          : \"day-box\"\r\n      }\r\n      id={\r\n        props.duty\r\n          ? props.duty === \"day\"\r\n            ? \"duty-day\"\r\n            : \"duty-night\"\r\n          : \"blank\"\r\n      }\r\n    >\r\n      <div className=\"day-box-children\">\r\n        {digitNumberCheck ? (\r\n          <p className={holidayCheck}>{props.date[2]}</p>\r\n        ) : (\r\n          <p className={holidayCheck}>{props.date[2]}&#8205; &#8205; &#8205;</p>\r\n        )}\r\n        <p className={holidayCheck}>{dayName}</p>\r\n      </div>\r\n      {props.shift === \"blank\" ? (\r\n        <div className=\"day-time-box\">\r\n          <span role=\"img\" className=\"hidden\" aria-label=\"\">\r\n            &#127769;\r\n          </span>\r\n        </div>\r\n      ) : (\r\n        <div className=\"day-time-box\">\r\n          <p>{displayUnicode(props.duty)}</p>\r\n          {!props.duty && (\r\n            <span className=\"hidden\" role=\"img\" aria-label=\"\">\r\n              &#127769;\r\n            </span>\r\n          )}\r\n          <p>{displayUnicode(props.duty, true)}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayBox;\r\n","class DateService {\r\n  static makeDateArray(date) {\r\n    return [date.getFullYear(), date.getMonth(), date.getDate()];\r\n  }\r\n  //konwertuje datę z formatu date na tablicę\r\n  static isDatesMatch(firstDate, secondDate) {\r\n    if (\r\n      firstDate[0] === secondDate[0] &&\r\n      firstDate[1] === secondDate[1] &&\r\n      firstDate[2] === secondDate[2]\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  //sprawdza, czy pierwsza data jest taka sama jak druga\r\n  static getYears(startDate, endDate) {\r\n    let startYear = startDate.getFullYear();\r\n    const endYear = endDate.getFullYear();\r\n    let years = [startYear];\r\n    while (startYear !== endYear) {\r\n      startYear++;\r\n      years.push(startYear);\r\n    }\r\n    return years;\r\n  }\r\n  //zwraca tablicę z latami, które obejmuje podany przedział dat w formacie date\r\n  static addDaysToDate(date, days) {\r\n    return new Date(date.valueOf() + days * 86400000);\r\n  }\r\n  //dodaje określoną liczbę dni do daty w formacie date\r\n  static getDates(startDate, endDate) {\r\n    let days = [];\r\n    let currentDate = startDate;\r\n    while (\r\n      !this.isDatesMatch(\r\n        this.makeDateArray(currentDate),\r\n        this.makeDateArray(endDate)\r\n      )\r\n    ) {\r\n      days.push(this.makeDateArray(currentDate));\r\n      currentDate = this.addDaysToDate(currentDate, 1);\r\n    }\r\n    if (days[days.length - 1] !== currentDate) {\r\n      days.push(this.makeDateArray(currentDate));\r\n    }\r\n    return days;\r\n  }\r\n  //zwraca wszystkie dni z podanego przedziału w formacie date w formie tablic\r\n  static checkIfContainsDates(element, datesToCheck, fixed) {\r\n    let isContains = false;\r\n    datesToCheck.forEach((e) => {\r\n      if (this.isDatesMatch(fixed ? e.date : e, element)) {\r\n        isContains = true;\r\n      }\r\n    });\r\n    return isContains;\r\n  }\r\n  static containsDateCheck(day, datesToCheck) {\r\n    let isContains = false;\r\n    datesToCheck.forEach((e) => {\r\n      if (this.isDatesMatch(day, e)) {\r\n        isContains = true;\r\n      }\r\n    });\r\n    return isContains;\r\n  }\r\n}\r\n\r\nexport default DateService;\r\n","/*\r\nstatic getEaster is from: https://gist.github.com/johndyer/0dffbdd98c2046f41180c051f378f343\r\n*/\r\n\r\nimport DateService from \"./dateService\";\r\n\r\nclass BigHolidays {\r\n  static constantDays(year) {\r\n    return [\r\n      [year, 0, 1],\r\n      [year, 0, 6],\r\n      [year, 4, 1],\r\n      [year, 4, 3],\r\n      [year, 7, 15],\r\n      [year, 10, 1],\r\n      [year, 10, 11],\r\n      [year, 11, 25],\r\n      [year, 11, 26],\r\n    ];\r\n  }\r\n  //zwraca dni wolne od pracy bez świąt ruchomych w formie tablic\r\n  static getEaster(year) {\r\n    const f = Math.floor,\r\n      G = year % 19,\r\n      C = f(year / 100),\r\n      H = (C - f(C / 4) - f((8 * C + 13) / 25) + 19 * G + 15) % 30,\r\n      I = H - f(H / 28) * (1 - f(29 / (H + 1)) * f((21 - G) / 11)),\r\n      J = (year + f(year / 4) + I + 2 - C + f(C / 4)) % 7,\r\n      L = I - J,\r\n      month = 3 + f((L + 40) / 44),\r\n      day = L + 28 - 31 * f(month / 4);\r\n    return [year, month, day];\r\n  }\r\n  //zwraca datę wielkanocy dla danego roku w formie tablicy\r\n  static getSecondEaster(year) {\r\n    const easter = new Date(this.getEaster(year)),\r\n      secondEaster = DateService.addDaysToDate(easter, 1);\r\n    return [year, secondEaster.getMonth(), secondEaster.getDate()];\r\n  }\r\n  //zwraca drugi dzień świąt wielkanocnych w formie tablicy\r\n  static getCorpusChristi(year) {\r\n    let corpusChristi = DateService.addDaysToDate(\r\n      new Date(this.getEaster(year)),\r\n      50\r\n    );\r\n    while (corpusChristi.getDay() !== 0) {\r\n      corpusChristi = DateService.addDaysToDate(corpusChristi, 1);\r\n    }\r\n    while (corpusChristi.getDay() !== 4) {\r\n      corpusChristi = DateService.addDaysToDate(corpusChristi, 1);\r\n    }\r\n    return [year, corpusChristi.getMonth(), corpusChristi.getDate()];\r\n  }\r\n  //zwraca datę bożego ciała w formie tablicy\r\n  static getBigHolidays(year) {\r\n    return [\r\n      ...this.constantDays(year),\r\n      this.getSecondEaster(year),\r\n      this.getCorpusChristi(year),\r\n    ];\r\n  }\r\n}\r\n\r\nexport default BigHolidays;\r\n","import DateService from \"./dateService\";\r\nimport Holidays from \"./holidays\";\r\n\r\nclass Shifts {\r\n  static getRefDate() {\r\n    return 1581634800000;\r\n  }\r\n  static getDayDifference(dateArray) {\r\n    const day = 86400000,\r\n      dayDifference =\r\n        (new Date(...dateArray).valueOf() - this.getRefDate()) / day;\r\n    return {\r\n      days: Math.round(Math.abs(dayDifference)),\r\n      positive: dayDifference >= 0,\r\n    };\r\n  }\r\n  static getShiftNumber(dateArray, night) {\r\n    const { days, positive } = this.getDayDifference(dateArray),\r\n      dayPattern = [3, 2, 1, 4, 3],\r\n      nightPattern = [4, 3, 2, 1, 4],\r\n      counter = positive ? days % 4 : 4 - (days % 4);\r\n    if (!night) {\r\n      return dayPattern[counter];\r\n    } else {\r\n      return nightPattern[counter];\r\n    }\r\n  }\r\n  // zwraca numer zmiany, która ma służbę podanego dnia;\r\n  static createMonth(monthNumber, year) {\r\n    let monthArray = [];\r\n    for (let i = 1; i < 32; i++) {\r\n      if (new Date(year, monthNumber, i).getMonth() === monthNumber) {\r\n        monthArray.push([year, monthNumber, i]);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return monthArray;\r\n  }\r\n  //tworzy tablicę ze wszystkimi datami danego miesiąca roku w formacie [yyyy, mm, dd];\r\n  static getFirstShiftDay(monthArray, shiftNumber) {\r\n    for (let i = 0; i < monthArray.length; i++) {\r\n      if (this.getShiftNumber(monthArray[i], false) === shiftNumber) {\r\n        return { dateIndex: i, night: false };\r\n      }\r\n      if (this.getShiftNumber(monthArray[i], true) === shiftNumber) {\r\n        return { dateIndex: i, night: true };\r\n      }\r\n    }\r\n  }\r\n  //zwraca index pierwszego rekordu monthArray, w którym dana zmiana ma służbę;\r\n  static addHolidaysToShiftMonth(shiftMonth, year) {\r\n    const holidays = Holidays.getBigHolidays(year);\r\n    let monthWithHolidays = [];\r\n    shiftMonth.forEach((day) => {\r\n      if (DateService.containsDateCheck(day.date, holidays)) {\r\n        monthWithHolidays.push({\r\n          date: day.date,\r\n          duty: day.duty,\r\n          holiday: true,\r\n        });\r\n      } else {\r\n        monthWithHolidays.push({\r\n          date: day.date,\r\n          duty: day.duty,\r\n          holiday: false,\r\n        });\r\n      }\r\n    });\r\n    return monthWithHolidays;\r\n  }\r\n  static createShiftMonth(monthNumber, year, shiftNumber) {\r\n    const month = this.createMonth(monthNumber, year);\r\n    const firstDay = this.getFirstShiftDay(month, shiftNumber);\r\n    let shiftMonth = [];\r\n    let firstDateShowed = false;\r\n    let dutySwitch = firstDay.night; // true/false\r\n    let counter = 0;\r\n    month.forEach((date, i) => {\r\n      if (i === firstDay.dateIndex) {\r\n        firstDateShowed = true;\r\n      }\r\n      if (firstDateShowed) {\r\n        if (dutySwitch && counter === 0) {\r\n          shiftMonth.push({ date, duty: \"night\" });\r\n          counter++;\r\n          dutySwitch = false;\r\n        } else if (!dutySwitch && counter === 0) {\r\n          shiftMonth.push({ date, duty: \"day\" });\r\n          counter = 0;\r\n          dutySwitch = true;\r\n        } else {\r\n          if (counter === 1) {\r\n            shiftMonth.push({ date, duty: false });\r\n            counter++;\r\n          } else if (counter === 2) {\r\n            shiftMonth.push({ date, duty: false });\r\n            counter = 0;\r\n          }\r\n        }\r\n      } else {\r\n        shiftMonth.push({ date, duty: false });\r\n      }\r\n    });\r\n\r\n    return this.addHolidaysToShiftMonth(shiftMonth, year);\r\n  }\r\n  //zwraca tablicę ze wszystkimi dniami miesiąca, gdzie rekordy zawierają informację o dacie, o tym czy dana zmiana\r\n  //ma tego dnia służbę i jeśli tak, to czy jest to dzień czy noc;\r\n  //usage example: Shifts.createShiftMonth(6, 2020, 3);\r\n  static createDualShiftMonth(monthNumber, year, dualShiftNumber) {\r\n    const firstShift = this.createShiftMonth(\r\n      monthNumber,\r\n      year,\r\n      dualShiftNumber\r\n    );\r\n    const secondShift = this.createShiftMonth(\r\n      monthNumber,\r\n      year,\r\n      dualShiftNumber + 2\r\n    );\r\n    let dualShiftMonth = [];\r\n    for (let i = 0; i < firstShift.length; i++) {\r\n      dualShiftMonth.push({\r\n        date: firstShift[i].date,\r\n        duty:\r\n          firstShift[i].duty === \"day\" || secondShift[i].duty === \"day\"\r\n            ? \"day\"\r\n            : false,\r\n      });\r\n    }\r\n    return this.addHolidaysToShiftMonth(dualShiftMonth, year);\r\n  }\r\n  //to co powyżej, tylko obsługuje zmiany podwójne (dzień/wolne/dzień/wolne) - obsługiwane numery zmian to 1 i 2;\r\n  //usage example: Shifts.createDualShiftMonth(6, 2020, 1);\r\n  static createBlankMonth(monthNumber, year) {\r\n    let month = this.createMonth(monthNumber, year);\r\n    month.forEach((date, i) => {\r\n      month[i] = { date, duty: false };\r\n    });\r\n    return this.addHolidaysToShiftMonth(month, year);\r\n  }\r\n}\r\n\r\nexport default Shifts;\r\n","const monthNames = [\r\n  \"Styczeń\",\r\n  \"Luty\",\r\n  \"Marzec\",\r\n  \"Kwiecień\",\r\n  \"Maj\",\r\n  \"Czerwiec\",\r\n  \"Lipiec\",\r\n  \"Sierpień\",\r\n  \"Wrzesień\",\r\n  \"Październik\",\r\n  \"Listopad\",\r\n  \"Grudzień\",\r\n];\r\n\r\nexport default monthNames;\r\n","import React from \"react\";\r\nimport monthNames from \"../../../services/monthNames\";\r\n\r\nconst MonthSelector = (props) => {\r\n  return (\r\n    <div>\r\n      <span>Miesiąc: </span>\r\n      <select\r\n        name=\"months\"\r\n        value={props.month}\r\n        id=\"months\"\r\n        onChange={(e) => props.handler(e.target.value)}\r\n      >\r\n        {monthNames.map((month, i) => (\r\n          <option value={i} key={i}>\r\n            {month}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthSelector;\r\n","import React from \"react\";\r\n\r\nconst ShiftSelector = (props) => {\r\n  return (\r\n    <div>\r\n      <span>Zmiana: </span>\r\n      <select\r\n        name=\"shifts\"\r\n        value={props.shift}\r\n        id=\"shifts\"\r\n        onChange={(e) => props.handler(e.target.value)}\r\n      >\r\n        <option value=\"blank\">wybierz zmianę</option>\r\n        <option value=\"1\">czterozmienny 1</option>\r\n        <option value=\"2\">czterozmienny 2</option>\r\n        <option value=\"3\">czterozmienny 3</option>\r\n        <option value=\"4\">czterozmienny 4</option>\r\n        <option value=\"5\">dwuzmienny 1/3</option>\r\n        <option value=\"6\">dwuzmienny 2/4</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShiftSelector;\r\n","import React from \"react\";\r\nimport \"./YearSelector.css\";\r\n\r\nconst YearSelector = (props) => {\r\n  return (\r\n    <div className=\"year-selector\">\r\n      <span onClick={() => props.handler(\"-\")} className=\"pointer\">\r\n        ◄\r\n      </span>\r\n      <span> {props.year < 0 ? props.year * -1 + \" p.n.e\" : props.year} </span>\r\n      <span onClick={() => props.handler(\"+\")} className=\"pointer\">\r\n        ►\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YearSelector;\r\n","import React from \"react\";\r\nimport MonthSelector from \"./components/MonthSelector\";\r\nimport ShiftSelector from \"./components/ShiftSelector\";\r\nimport YearSelector from \"./components/YearSelector\";\r\nimport \"./DateSelector.css\";\r\n\r\nconst DateSelector = (props) => {\r\n  return (\r\n    <div>\r\n      <div className=\"header-nav\" id=\"year-selector\">\r\n        <YearSelector handler={props.yearSelector} year={props.state.year} />\r\n      </div>\r\n      <div className=\"header-nav\">\r\n        <MonthSelector\r\n          handler={props.monthSelector}\r\n          month={props.state.month}\r\n        />\r\n      </div>\r\n      <div className=\"header-nav\">\r\n        <ShiftSelector\r\n          handler={props.shiftSelector}\r\n          shift={props.state.shift}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateSelector;\r\n","import React from \"react\";\r\nimport DayBox from \"../DayBox/DayBox\";\r\nimport Shifts from \"../../services/shifts\";\r\nimport DateSelector from \"../DateSelector/DateSelector\";\r\nimport \"./Calendar.css\";\r\n\r\nclass Calendar extends React.Component {\r\n  state = {\r\n    month: new Date(Date.now()).getMonth(),\r\n    year: new Date(Date.now()).getFullYear(),\r\n    shift: \"blank\",\r\n  };\r\n  handleMonthSelector = (props) => {\r\n    this.setState({\r\n      month: parseInt(props),\r\n    });\r\n  };\r\n  handleYearSelector = (props) => {\r\n    switch (props) {\r\n      case \"+\":\r\n        this.setState({ year: this.state.year + 1 });\r\n        break;\r\n      case \"-\":\r\n        this.setState({ year: this.state.year - 1 });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  handleShiftSelector = (props) => {\r\n    this.setState({\r\n      shift: props === \"blank\" ? props : parseInt(props),\r\n    });\r\n  };\r\n  render() {\r\n    const dutyMonth =\r\n      this.state.shift === \"blank\"\r\n        ? Shifts.createBlankMonth(this.state.month, this.state.year)\r\n        : this.state.shift < 5\r\n        ? Shifts.createShiftMonth(\r\n            this.state.month,\r\n            this.state.year,\r\n            this.state.shift\r\n          )\r\n        : Shifts.createDualShiftMonth(\r\n            this.state.month,\r\n            this.state.year,\r\n            this.state.shift - 4\r\n          );\r\n    const today = new Date(Date.now()).getDate();\r\n    const isMonthAndYearMatch =\r\n      new Date(Date.now()).getMonth() === this.state.month &&\r\n      new Date(Date.now()).getFullYear() === this.state.year;\r\n    return (\r\n      <div>\r\n        <div className=\"header\">\r\n          <DateSelector\r\n            monthSelector={this.handleMonthSelector}\r\n            yearSelector={this.handleYearSelector}\r\n            shiftSelector={this.handleShiftSelector}\r\n            state={this.state}\r\n          />\r\n        </div>\r\n        <div className=\"content\">\r\n          {dutyMonth.map((day, i) => (\r\n            <DayBox\r\n              date={day.date}\r\n              duty={day.duty}\r\n              shift={this.state.shift}\r\n              holiday={day.holiday}\r\n              today={today}\r\n              isMonthAndYearMatch={isMonthAndYearMatch}\r\n              key={i}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendar;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n  return <p className=\"footer\">© Wiktor Sacharczuk 2020</p>;\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport Calendar from \"./components/Calendar/Calendar\";\nimport Footer from \"./components/Footer/Footer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App-container\">\n      <div className=\"App\">\n        <div className=\"prison-service\">\n          <h1>KALENDARZ ZMIANOWY</h1>\n          <h2>SŁUŻBY WIĘZIENNEJ</h2>\n        </div>\n        <Calendar />\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.css\"\nimport \"./fonts/TREBUCBD.ttf\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}